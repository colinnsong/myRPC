// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_2eproto;
namespace fixbug {
class FriendChatRequest;
class FriendChatRequestDefaultTypeInternal;
extern FriendChatRequestDefaultTypeInternal _FriendChatRequest_default_instance_;
class FriendChatResponse;
class FriendChatResponseDefaultTypeInternal;
extern FriendChatResponseDefaultTypeInternal _FriendChatResponse_default_instance_;
class GetFriendListRequest;
class GetFriendListRequestDefaultTypeInternal;
extern GetFriendListRequestDefaultTypeInternal _GetFriendListRequest_default_instance_;
class GetFriendListResponse;
class GetFriendListResponseDefaultTypeInternal;
extern GetFriendListResponseDefaultTypeInternal _GetFriendListResponse_default_instance_;
class GetGroupListRequest;
class GetGroupListRequestDefaultTypeInternal;
extern GetGroupListRequestDefaultTypeInternal _GetGroupListRequest_default_instance_;
class GetGroupListResponse;
class GetGroupListResponseDefaultTypeInternal;
extern GetGroupListResponseDefaultTypeInternal _GetGroupListResponse_default_instance_;
class GetOfflineMsgRequest;
class GetOfflineMsgRequestDefaultTypeInternal;
extern GetOfflineMsgRequestDefaultTypeInternal _GetOfflineMsgRequest_default_instance_;
class GetOfflineMsgResponse;
class GetOfflineMsgResponseDefaultTypeInternal;
extern GetOfflineMsgResponseDefaultTypeInternal _GetOfflineMsgResponse_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class LoginoutRequest;
class LoginoutRequestDefaultTypeInternal;
extern LoginoutRequestDefaultTypeInternal _LoginoutRequest_default_instance_;
class LoginoutResponse;
class LoginoutResponseDefaultTypeInternal;
extern LoginoutResponseDefaultTypeInternal _LoginoutResponse_default_instance_;
class RegistRequest;
class RegistRequestDefaultTypeInternal;
extern RegistRequestDefaultTypeInternal _RegistRequest_default_instance_;
class RegistResponse;
class RegistResponseDefaultTypeInternal;
extern RegistResponseDefaultTypeInternal _RegistResponse_default_instance_;
class ResultCode;
class ResultCodeDefaultTypeInternal;
extern ResultCodeDefaultTypeInternal _ResultCode_default_instance_;
}  // namespace fixbug
PROTOBUF_NAMESPACE_OPEN
template<> ::fixbug::FriendChatRequest* Arena::CreateMaybeMessage<::fixbug::FriendChatRequest>(Arena*);
template<> ::fixbug::FriendChatResponse* Arena::CreateMaybeMessage<::fixbug::FriendChatResponse>(Arena*);
template<> ::fixbug::GetFriendListRequest* Arena::CreateMaybeMessage<::fixbug::GetFriendListRequest>(Arena*);
template<> ::fixbug::GetFriendListResponse* Arena::CreateMaybeMessage<::fixbug::GetFriendListResponse>(Arena*);
template<> ::fixbug::GetGroupListRequest* Arena::CreateMaybeMessage<::fixbug::GetGroupListRequest>(Arena*);
template<> ::fixbug::GetGroupListResponse* Arena::CreateMaybeMessage<::fixbug::GetGroupListResponse>(Arena*);
template<> ::fixbug::GetOfflineMsgRequest* Arena::CreateMaybeMessage<::fixbug::GetOfflineMsgRequest>(Arena*);
template<> ::fixbug::GetOfflineMsgResponse* Arena::CreateMaybeMessage<::fixbug::GetOfflineMsgResponse>(Arena*);
template<> ::fixbug::LoginRequest* Arena::CreateMaybeMessage<::fixbug::LoginRequest>(Arena*);
template<> ::fixbug::LoginResponse* Arena::CreateMaybeMessage<::fixbug::LoginResponse>(Arena*);
template<> ::fixbug::LoginoutRequest* Arena::CreateMaybeMessage<::fixbug::LoginoutRequest>(Arena*);
template<> ::fixbug::LoginoutResponse* Arena::CreateMaybeMessage<::fixbug::LoginoutResponse>(Arena*);
template<> ::fixbug::RegistRequest* Arena::CreateMaybeMessage<::fixbug::RegistRequest>(Arena*);
template<> ::fixbug::RegistResponse* Arena::CreateMaybeMessage<::fixbug::RegistResponse>(Arena*);
template<> ::fixbug::ResultCode* Arena::CreateMaybeMessage<::fixbug::ResultCode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fixbug {

// ===================================================================

class ResultCode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.ResultCode) */ {
 public:
  ResultCode();
  virtual ~ResultCode();

  ResultCode(const ResultCode& from);
  ResultCode(ResultCode&& from) noexcept
    : ResultCode() {
    *this = ::std::move(from);
  }

  inline ResultCode& operator=(const ResultCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultCode& operator=(ResultCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultCode* internal_default_instance() {
    return reinterpret_cast<const ResultCode*>(
               &_ResultCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResultCode& a, ResultCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultCode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultCode* New() const final {
    return CreateMaybeMessage<ResultCode>(nullptr);
  }

  ResultCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultCode& from);
  void MergeFrom(const ResultCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.ResultCode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const void* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.ResultCode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RegistRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.RegistRequest) */ {
 public:
  RegistRequest();
  virtual ~RegistRequest();

  RegistRequest(const RegistRequest& from);
  RegistRequest(RegistRequest&& from) noexcept
    : RegistRequest() {
    *this = ::std::move(from);
  }

  inline RegistRequest& operator=(const RegistRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegistRequest& operator=(RegistRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegistRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegistRequest* internal_default_instance() {
    return reinterpret_cast<const RegistRequest*>(
               &_RegistRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegistRequest& a, RegistRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegistRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegistRequest* New() const final {
    return CreateMaybeMessage<RegistRequest>(nullptr);
  }

  RegistRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegistRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegistRequest& from);
  void MergeFrom(const RegistRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegistRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.RegistRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // bytes username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // bytes password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:fixbug.RegistRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RegistResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.RegistResponse) */ {
 public:
  RegistResponse();
  virtual ~RegistResponse();

  RegistResponse(const RegistResponse& from);
  RegistResponse(RegistResponse&& from) noexcept
    : RegistResponse() {
    *this = ::std::move(from);
  }

  inline RegistResponse& operator=(const RegistResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegistResponse& operator=(RegistResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegistResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegistResponse* internal_default_instance() {
    return reinterpret_cast<const RegistResponse*>(
               &_RegistResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegistResponse& a, RegistResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegistResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegistResponse* New() const final {
    return CreateMaybeMessage<RegistResponse>(nullptr);
  }

  RegistResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegistResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegistResponse& from);
  void MergeFrom(const RegistResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegistResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.RegistResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kUseridFieldNumber = 2,
  };
  // .fixbug.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::fixbug::ResultCode& result() const;
  ::fixbug::ResultCode* release_result();
  ::fixbug::ResultCode* mutable_result();
  void set_allocated_result(::fixbug::ResultCode* result);
  private:
  const ::fixbug::ResultCode& _internal_result() const;
  ::fixbug::ResultCode* _internal_mutable_result();
  public:

  // int32 userid = 2;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.RegistResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::fixbug::ResultCode* result_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.LoginRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 2,
    kUseridFieldNumber = 1,
  };
  // bytes password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.LoginRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.LoginResponse) */ {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return CreateMaybeMessage<LoginResponse>(nullptr);
  }

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.LoginResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kGetfriendlistresponseFieldNumber = 2,
    kGetgrouplistresponseFieldNumber = 3,
    kGetofflinemsgresponseFieldNumber = 4,
  };
  // .fixbug.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::fixbug::ResultCode& result() const;
  ::fixbug::ResultCode* release_result();
  ::fixbug::ResultCode* mutable_result();
  void set_allocated_result(::fixbug::ResultCode* result);
  private:
  const ::fixbug::ResultCode& _internal_result() const;
  ::fixbug::ResultCode* _internal_mutable_result();
  public:

  // .fixbug.GetFriendListResponse getfriendlistresponse = 2;
  bool has_getfriendlistresponse() const;
  private:
  bool _internal_has_getfriendlistresponse() const;
  public:
  void clear_getfriendlistresponse();
  const ::fixbug::GetFriendListResponse& getfriendlistresponse() const;
  ::fixbug::GetFriendListResponse* release_getfriendlistresponse();
  ::fixbug::GetFriendListResponse* mutable_getfriendlistresponse();
  void set_allocated_getfriendlistresponse(::fixbug::GetFriendListResponse* getfriendlistresponse);
  private:
  const ::fixbug::GetFriendListResponse& _internal_getfriendlistresponse() const;
  ::fixbug::GetFriendListResponse* _internal_mutable_getfriendlistresponse();
  public:

  // .fixbug.GetGroupListResponse getgrouplistresponse = 3;
  bool has_getgrouplistresponse() const;
  private:
  bool _internal_has_getgrouplistresponse() const;
  public:
  void clear_getgrouplistresponse();
  const ::fixbug::GetGroupListResponse& getgrouplistresponse() const;
  ::fixbug::GetGroupListResponse* release_getgrouplistresponse();
  ::fixbug::GetGroupListResponse* mutable_getgrouplistresponse();
  void set_allocated_getgrouplistresponse(::fixbug::GetGroupListResponse* getgrouplistresponse);
  private:
  const ::fixbug::GetGroupListResponse& _internal_getgrouplistresponse() const;
  ::fixbug::GetGroupListResponse* _internal_mutable_getgrouplistresponse();
  public:

  // .fixbug.GetOfflineMsgResponse getofflinemsgresponse = 4;
  bool has_getofflinemsgresponse() const;
  private:
  bool _internal_has_getofflinemsgresponse() const;
  public:
  void clear_getofflinemsgresponse();
  const ::fixbug::GetOfflineMsgResponse& getofflinemsgresponse() const;
  ::fixbug::GetOfflineMsgResponse* release_getofflinemsgresponse();
  ::fixbug::GetOfflineMsgResponse* mutable_getofflinemsgresponse();
  void set_allocated_getofflinemsgresponse(::fixbug::GetOfflineMsgResponse* getofflinemsgresponse);
  private:
  const ::fixbug::GetOfflineMsgResponse& _internal_getofflinemsgresponse() const;
  ::fixbug::GetOfflineMsgResponse* _internal_mutable_getofflinemsgresponse();
  public:

  // @@protoc_insertion_point(class_scope:fixbug.LoginResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::fixbug::ResultCode* result_;
  ::fixbug::GetFriendListResponse* getfriendlistresponse_;
  ::fixbug::GetGroupListResponse* getgrouplistresponse_;
  ::fixbug::GetOfflineMsgResponse* getofflinemsgresponse_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class LoginoutRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.LoginoutRequest) */ {
 public:
  LoginoutRequest();
  virtual ~LoginoutRequest();

  LoginoutRequest(const LoginoutRequest& from);
  LoginoutRequest(LoginoutRequest&& from) noexcept
    : LoginoutRequest() {
    *this = ::std::move(from);
  }

  inline LoginoutRequest& operator=(const LoginoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginoutRequest& operator=(LoginoutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginoutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginoutRequest* internal_default_instance() {
    return reinterpret_cast<const LoginoutRequest*>(
               &_LoginoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LoginoutRequest& a, LoginoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginoutRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginoutRequest* New() const final {
    return CreateMaybeMessage<LoginoutRequest>(nullptr);
  }

  LoginoutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginoutRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginoutRequest& from);
  void MergeFrom(const LoginoutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginoutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.LoginoutRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // int32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.LoginoutRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class LoginoutResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.LoginoutResponse) */ {
 public:
  LoginoutResponse();
  virtual ~LoginoutResponse();

  LoginoutResponse(const LoginoutResponse& from);
  LoginoutResponse(LoginoutResponse&& from) noexcept
    : LoginoutResponse() {
    *this = ::std::move(from);
  }

  inline LoginoutResponse& operator=(const LoginoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginoutResponse& operator=(LoginoutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginoutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginoutResponse* internal_default_instance() {
    return reinterpret_cast<const LoginoutResponse*>(
               &_LoginoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LoginoutResponse& a, LoginoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginoutResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginoutResponse* New() const final {
    return CreateMaybeMessage<LoginoutResponse>(nullptr);
  }

  LoginoutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginoutResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginoutResponse& from);
  void MergeFrom(const LoginoutResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginoutResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.LoginoutResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .fixbug.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::fixbug::ResultCode& result() const;
  ::fixbug::ResultCode* release_result();
  ::fixbug::ResultCode* mutable_result();
  void set_allocated_result(::fixbug::ResultCode* result);
  private:
  const ::fixbug::ResultCode& _internal_result() const;
  ::fixbug::ResultCode* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:fixbug.LoginoutResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::fixbug::ResultCode* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetFriendListRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.GetFriendListRequest) */ {
 public:
  GetFriendListRequest();
  virtual ~GetFriendListRequest();

  GetFriendListRequest(const GetFriendListRequest& from);
  GetFriendListRequest(GetFriendListRequest&& from) noexcept
    : GetFriendListRequest() {
    *this = ::std::move(from);
  }

  inline GetFriendListRequest& operator=(const GetFriendListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendListRequest& operator=(GetFriendListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFriendListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFriendListRequest* internal_default_instance() {
    return reinterpret_cast<const GetFriendListRequest*>(
               &_GetFriendListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetFriendListRequest& a, GetFriendListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendListRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFriendListRequest* New() const final {
    return CreateMaybeMessage<GetFriendListRequest>(nullptr);
  }

  GetFriendListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFriendListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFriendListRequest& from);
  void MergeFrom(const GetFriendListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.GetFriendListRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // int32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.GetFriendListRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetFriendListResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.GetFriendListResponse) */ {
 public:
  GetFriendListResponse();
  virtual ~GetFriendListResponse();

  GetFriendListResponse(const GetFriendListResponse& from);
  GetFriendListResponse(GetFriendListResponse&& from) noexcept
    : GetFriendListResponse() {
    *this = ::std::move(from);
  }

  inline GetFriendListResponse& operator=(const GetFriendListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendListResponse& operator=(GetFriendListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFriendListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFriendListResponse* internal_default_instance() {
    return reinterpret_cast<const GetFriendListResponse*>(
               &_GetFriendListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetFriendListResponse& a, GetFriendListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendListResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFriendListResponse* New() const final {
    return CreateMaybeMessage<GetFriendListResponse>(nullptr);
  }

  GetFriendListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFriendListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFriendListResponse& from);
  void MergeFrom(const GetFriendListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.GetFriendListResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated bytes friends = 2;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  const std::string& friends(int index) const;
  std::string* mutable_friends(int index);
  void set_friends(int index, const std::string& value);
  void set_friends(int index, std::string&& value);
  void set_friends(int index, const char* value);
  void set_friends(int index, const void* value, size_t size);
  std::string* add_friends();
  void add_friends(const std::string& value);
  void add_friends(std::string&& value);
  void add_friends(const char* value);
  void add_friends(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& friends() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_friends();
  private:
  const std::string& _internal_friends(int index) const;
  std::string* _internal_add_friends();
  public:

  // .fixbug.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::fixbug::ResultCode& result() const;
  ::fixbug::ResultCode* release_result();
  ::fixbug::ResultCode* mutable_result();
  void set_allocated_result(::fixbug::ResultCode* result);
  private:
  const ::fixbug::ResultCode& _internal_result() const;
  ::fixbug::ResultCode* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:fixbug.GetFriendListResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> friends_;
  ::fixbug::ResultCode* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetGroupListRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.GetGroupListRequest) */ {
 public:
  GetGroupListRequest();
  virtual ~GetGroupListRequest();

  GetGroupListRequest(const GetGroupListRequest& from);
  GetGroupListRequest(GetGroupListRequest&& from) noexcept
    : GetGroupListRequest() {
    *this = ::std::move(from);
  }

  inline GetGroupListRequest& operator=(const GetGroupListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupListRequest& operator=(GetGroupListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupListRequest* internal_default_instance() {
    return reinterpret_cast<const GetGroupListRequest*>(
               &_GetGroupListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetGroupListRequest& a, GetGroupListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupListRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupListRequest* New() const final {
    return CreateMaybeMessage<GetGroupListRequest>(nullptr);
  }

  GetGroupListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupListRequest& from);
  void MergeFrom(const GetGroupListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.GetGroupListRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // int32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.GetGroupListRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetGroupListResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.GetGroupListResponse) */ {
 public:
  GetGroupListResponse();
  virtual ~GetGroupListResponse();

  GetGroupListResponse(const GetGroupListResponse& from);
  GetGroupListResponse(GetGroupListResponse&& from) noexcept
    : GetGroupListResponse() {
    *this = ::std::move(from);
  }

  inline GetGroupListResponse& operator=(const GetGroupListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupListResponse& operator=(GetGroupListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupListResponse* internal_default_instance() {
    return reinterpret_cast<const GetGroupListResponse*>(
               &_GetGroupListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetGroupListResponse& a, GetGroupListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupListResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupListResponse* New() const final {
    return CreateMaybeMessage<GetGroupListResponse>(nullptr);
  }

  GetGroupListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupListResponse& from);
  void MergeFrom(const GetGroupListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.GetGroupListResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated bytes groups = 2;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  const std::string& groups(int index) const;
  std::string* mutable_groups(int index);
  void set_groups(int index, const std::string& value);
  void set_groups(int index, std::string&& value);
  void set_groups(int index, const char* value);
  void set_groups(int index, const void* value, size_t size);
  std::string* add_groups();
  void add_groups(const std::string& value);
  void add_groups(std::string&& value);
  void add_groups(const char* value);
  void add_groups(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_groups();
  private:
  const std::string& _internal_groups(int index) const;
  std::string* _internal_add_groups();
  public:

  // .fixbug.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::fixbug::ResultCode& result() const;
  ::fixbug::ResultCode* release_result();
  ::fixbug::ResultCode* mutable_result();
  void set_allocated_result(::fixbug::ResultCode* result);
  private:
  const ::fixbug::ResultCode& _internal_result() const;
  ::fixbug::ResultCode* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:fixbug.GetGroupListResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> groups_;
  ::fixbug::ResultCode* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class FriendChatRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.FriendChatRequest) */ {
 public:
  FriendChatRequest();
  virtual ~FriendChatRequest();

  FriendChatRequest(const FriendChatRequest& from);
  FriendChatRequest(FriendChatRequest&& from) noexcept
    : FriendChatRequest() {
    *this = ::std::move(from);
  }

  inline FriendChatRequest& operator=(const FriendChatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendChatRequest& operator=(FriendChatRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendChatRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendChatRequest* internal_default_instance() {
    return reinterpret_cast<const FriendChatRequest*>(
               &_FriendChatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(FriendChatRequest& a, FriendChatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendChatRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendChatRequest* New() const final {
    return CreateMaybeMessage<FriendChatRequest>(nullptr);
  }

  FriendChatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendChatRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendChatRequest& from);
  void MergeFrom(const FriendChatRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendChatRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.FriendChatRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kFriendidFieldNumber = 1,
  };
  // bytes message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 friendid = 1;
  void clear_friendid();
  ::PROTOBUF_NAMESPACE_ID::int32 friendid() const;
  void set_friendid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_friendid() const;
  void _internal_set_friendid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.FriendChatRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 friendid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class FriendChatResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.FriendChatResponse) */ {
 public:
  FriendChatResponse();
  virtual ~FriendChatResponse();

  FriendChatResponse(const FriendChatResponse& from);
  FriendChatResponse(FriendChatResponse&& from) noexcept
    : FriendChatResponse() {
    *this = ::std::move(from);
  }

  inline FriendChatResponse& operator=(const FriendChatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendChatResponse& operator=(FriendChatResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendChatResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendChatResponse* internal_default_instance() {
    return reinterpret_cast<const FriendChatResponse*>(
               &_FriendChatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FriendChatResponse& a, FriendChatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendChatResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendChatResponse* New() const final {
    return CreateMaybeMessage<FriendChatResponse>(nullptr);
  }

  FriendChatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendChatResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendChatResponse& from);
  void MergeFrom(const FriendChatResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendChatResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.FriendChatResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .fixbug.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::fixbug::ResultCode& result() const;
  ::fixbug::ResultCode* release_result();
  ::fixbug::ResultCode* mutable_result();
  void set_allocated_result(::fixbug::ResultCode* result);
  private:
  const ::fixbug::ResultCode& _internal_result() const;
  ::fixbug::ResultCode* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:fixbug.FriendChatResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::fixbug::ResultCode* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetOfflineMsgRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.GetOfflineMsgRequest) */ {
 public:
  GetOfflineMsgRequest();
  virtual ~GetOfflineMsgRequest();

  GetOfflineMsgRequest(const GetOfflineMsgRequest& from);
  GetOfflineMsgRequest(GetOfflineMsgRequest&& from) noexcept
    : GetOfflineMsgRequest() {
    *this = ::std::move(from);
  }

  inline GetOfflineMsgRequest& operator=(const GetOfflineMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOfflineMsgRequest& operator=(GetOfflineMsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOfflineMsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOfflineMsgRequest* internal_default_instance() {
    return reinterpret_cast<const GetOfflineMsgRequest*>(
               &_GetOfflineMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetOfflineMsgRequest& a, GetOfflineMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOfflineMsgRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOfflineMsgRequest* New() const final {
    return CreateMaybeMessage<GetOfflineMsgRequest>(nullptr);
  }

  GetOfflineMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOfflineMsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOfflineMsgRequest& from);
  void MergeFrom(const GetOfflineMsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOfflineMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.GetOfflineMsgRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // int32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.GetOfflineMsgRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetOfflineMsgResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.GetOfflineMsgResponse) */ {
 public:
  GetOfflineMsgResponse();
  virtual ~GetOfflineMsgResponse();

  GetOfflineMsgResponse(const GetOfflineMsgResponse& from);
  GetOfflineMsgResponse(GetOfflineMsgResponse&& from) noexcept
    : GetOfflineMsgResponse() {
    *this = ::std::move(from);
  }

  inline GetOfflineMsgResponse& operator=(const GetOfflineMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOfflineMsgResponse& operator=(GetOfflineMsgResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOfflineMsgResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOfflineMsgResponse* internal_default_instance() {
    return reinterpret_cast<const GetOfflineMsgResponse*>(
               &_GetOfflineMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetOfflineMsgResponse& a, GetOfflineMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOfflineMsgResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOfflineMsgResponse* New() const final {
    return CreateMaybeMessage<GetOfflineMsgResponse>(nullptr);
  }

  GetOfflineMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOfflineMsgResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOfflineMsgResponse& from);
  void MergeFrom(const GetOfflineMsgResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOfflineMsgResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.GetOfflineMsgResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOfflinemsgFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated bytes offlinemsg = 2;
  int offlinemsg_size() const;
  private:
  int _internal_offlinemsg_size() const;
  public:
  void clear_offlinemsg();
  const std::string& offlinemsg(int index) const;
  std::string* mutable_offlinemsg(int index);
  void set_offlinemsg(int index, const std::string& value);
  void set_offlinemsg(int index, std::string&& value);
  void set_offlinemsg(int index, const char* value);
  void set_offlinemsg(int index, const void* value, size_t size);
  std::string* add_offlinemsg();
  void add_offlinemsg(const std::string& value);
  void add_offlinemsg(std::string&& value);
  void add_offlinemsg(const char* value);
  void add_offlinemsg(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& offlinemsg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_offlinemsg();
  private:
  const std::string& _internal_offlinemsg(int index) const;
  std::string* _internal_add_offlinemsg();
  public:

  // .fixbug.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::fixbug::ResultCode& result() const;
  ::fixbug::ResultCode* release_result();
  ::fixbug::ResultCode* mutable_result();
  void set_allocated_result(::fixbug::ResultCode* result);
  private:
  const ::fixbug::ResultCode& _internal_result() const;
  ::fixbug::ResultCode* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:fixbug.GetOfflineMsgResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> offlinemsg_;
  ::fixbug::ResultCode* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// ===================================================================

class UserServiceRpc_Stub;

class UserServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UserServiceRpc() {};
 public:
  virtual ~UserServiceRpc();

  typedef UserServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::LoginRequest* request,
                       ::fixbug::LoginResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Regist(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::RegistRequest* request,
                       ::fixbug::RegistResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Loginout(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::LoginoutRequest* request,
                       ::fixbug::LoginoutResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServiceRpc);
};

class UserServiceRpc_Stub : public UserServiceRpc {
 public:
  UserServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  UserServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~UserServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements UserServiceRpc ------------------------------------------

  void Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::LoginRequest* request,
                       ::fixbug::LoginResponse* response,
                       ::google::protobuf::Closure* done);
  void Regist(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::RegistRequest* request,
                       ::fixbug::RegistResponse* response,
                       ::google::protobuf::Closure* done);
  void Loginout(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::LoginoutRequest* request,
                       ::fixbug::LoginoutResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServiceRpc_Stub);
};


// -------------------------------------------------------------------

class FriendAndGroupServiceRpc_Stub;

class FriendAndGroupServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FriendAndGroupServiceRpc() {};
 public:
  virtual ~FriendAndGroupServiceRpc();

  typedef FriendAndGroupServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::GetFriendListRequest* request,
                       ::fixbug::GetFriendListResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetGroupList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::GetGroupListRequest* request,
                       ::fixbug::GetGroupListResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendAndGroupServiceRpc);
};

class FriendAndGroupServiceRpc_Stub : public FriendAndGroupServiceRpc {
 public:
  FriendAndGroupServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  FriendAndGroupServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~FriendAndGroupServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements FriendAndGroupServiceRpc ------------------------------------------

  void GetFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::GetFriendListRequest* request,
                       ::fixbug::GetFriendListResponse* response,
                       ::google::protobuf::Closure* done);
  void GetGroupList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::GetGroupListRequest* request,
                       ::fixbug::GetGroupListResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendAndGroupServiceRpc_Stub);
};


// -------------------------------------------------------------------

class ChatServiceRpc_Stub;

class ChatServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ChatServiceRpc() {};
 public:
  virtual ~ChatServiceRpc();

  typedef ChatServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void FriendChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::FriendChatRequest* request,
                       ::fixbug::FriendChatResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetOfflineMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::GetOfflineMsgRequest* request,
                       ::fixbug::GetOfflineMsgResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ChatServiceRpc);
};

class ChatServiceRpc_Stub : public ChatServiceRpc {
 public:
  ChatServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  ChatServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~ChatServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements ChatServiceRpc ------------------------------------------

  void FriendChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::FriendChatRequest* request,
                       ::fixbug::FriendChatResponse* response,
                       ::google::protobuf::Closure* done);
  void GetOfflineMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::GetOfflineMsgRequest* request,
                       ::fixbug::GetOfflineMsgResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ChatServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResultCode

// int32 errcode = 1;
inline void ResultCode::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultCode::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultCode::errcode() const {
  // @@protoc_insertion_point(field_get:fixbug.ResultCode.errcode)
  return _internal_errcode();
}
inline void ResultCode::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void ResultCode::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:fixbug.ResultCode.errcode)
}

// bytes errmsg = 2;
inline void ResultCode::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResultCode::errmsg() const {
  // @@protoc_insertion_point(field_get:fixbug.ResultCode.errmsg)
  return _internal_errmsg();
}
inline void ResultCode::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:fixbug.ResultCode.errmsg)
}
inline std::string* ResultCode::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:fixbug.ResultCode.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& ResultCode::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void ResultCode::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResultCode::set_errmsg(std::string&& value) {
  
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.ResultCode.errmsg)
}
inline void ResultCode::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.ResultCode.errmsg)
}
inline void ResultCode::set_errmsg(const void* value, size_t size) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.ResultCode.errmsg)
}
inline std::string* ResultCode::_internal_mutable_errmsg() {
  
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResultCode::release_errmsg() {
  // @@protoc_insertion_point(field_release:fixbug.ResultCode.errmsg)
  
  return errmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResultCode::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:fixbug.ResultCode.errmsg)
}

// -------------------------------------------------------------------

// RegistRequest

// bytes username = 1;
inline void RegistRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegistRequest::username() const {
  // @@protoc_insertion_point(field_get:fixbug.RegistRequest.username)
  return _internal_username();
}
inline void RegistRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:fixbug.RegistRequest.username)
}
inline std::string* RegistRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:fixbug.RegistRequest.username)
  return _internal_mutable_username();
}
inline const std::string& RegistRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void RegistRequest::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegistRequest::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.RegistRequest.username)
}
inline void RegistRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.RegistRequest.username)
}
inline void RegistRequest::set_username(const void* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.RegistRequest.username)
}
inline std::string* RegistRequest::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegistRequest::release_username() {
  // @@protoc_insertion_point(field_release:fixbug.RegistRequest.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegistRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:fixbug.RegistRequest.username)
}

// bytes password = 2;
inline void RegistRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegistRequest::password() const {
  // @@protoc_insertion_point(field_get:fixbug.RegistRequest.password)
  return _internal_password();
}
inline void RegistRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:fixbug.RegistRequest.password)
}
inline std::string* RegistRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:fixbug.RegistRequest.password)
  return _internal_mutable_password();
}
inline const std::string& RegistRequest::_internal_password() const {
  return password_.GetNoArena();
}
inline void RegistRequest::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegistRequest::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.RegistRequest.password)
}
inline void RegistRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.RegistRequest.password)
}
inline void RegistRequest::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.RegistRequest.password)
}
inline std::string* RegistRequest::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegistRequest::release_password() {
  // @@protoc_insertion_point(field_release:fixbug.RegistRequest.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegistRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:fixbug.RegistRequest.password)
}

// -------------------------------------------------------------------

// RegistResponse

// .fixbug.ResultCode result = 1;
inline bool RegistResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool RegistResponse::has_result() const {
  return _internal_has_result();
}
inline void RegistResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::fixbug::ResultCode& RegistResponse::_internal_result() const {
  const ::fixbug::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fixbug::ResultCode*>(
      &::fixbug::_ResultCode_default_instance_);
}
inline const ::fixbug::ResultCode& RegistResponse::result() const {
  // @@protoc_insertion_point(field_get:fixbug.RegistResponse.result)
  return _internal_result();
}
inline ::fixbug::ResultCode* RegistResponse::release_result() {
  // @@protoc_insertion_point(field_release:fixbug.RegistResponse.result)
  
  ::fixbug::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::fixbug::ResultCode* RegistResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbug::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::fixbug::ResultCode* RegistResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:fixbug.RegistResponse.result)
  return _internal_mutable_result();
}
inline void RegistResponse::set_allocated_result(::fixbug::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:fixbug.RegistResponse.result)
}

// int32 userid = 2;
inline void RegistResponse::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegistResponse::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegistResponse::userid() const {
  // @@protoc_insertion_point(field_get:fixbug.RegistResponse.userid)
  return _internal_userid();
}
inline void RegistResponse::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void RegistResponse::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:fixbug.RegistResponse.userid)
}

// -------------------------------------------------------------------

// LoginRequest

// int32 userid = 1;
inline void LoginRequest::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRequest::userid() const {
  // @@protoc_insertion_point(field_get:fixbug.LoginRequest.userid)
  return _internal_userid();
}
inline void LoginRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void LoginRequest::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:fixbug.LoginRequest.userid)
}

// bytes password = 2;
inline void LoginRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::password() const {
  // @@protoc_insertion_point(field_get:fixbug.LoginRequest.password)
  return _internal_password();
}
inline void LoginRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:fixbug.LoginRequest.password)
}
inline std::string* LoginRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:fixbug.LoginRequest.password)
  return _internal_mutable_password();
}
inline const std::string& LoginRequest::_internal_password() const {
  return password_.GetNoArena();
}
inline void LoginRequest::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRequest::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.LoginRequest.password)
}
inline void LoginRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.LoginRequest.password)
}
inline void LoginRequest::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.LoginRequest.password)
}
inline std::string* LoginRequest::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:fixbug.LoginRequest.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:fixbug.LoginRequest.password)
}

// -------------------------------------------------------------------

// LoginResponse

// .fixbug.ResultCode result = 1;
inline bool LoginResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool LoginResponse::has_result() const {
  return _internal_has_result();
}
inline void LoginResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::fixbug::ResultCode& LoginResponse::_internal_result() const {
  const ::fixbug::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fixbug::ResultCode*>(
      &::fixbug::_ResultCode_default_instance_);
}
inline const ::fixbug::ResultCode& LoginResponse::result() const {
  // @@protoc_insertion_point(field_get:fixbug.LoginResponse.result)
  return _internal_result();
}
inline ::fixbug::ResultCode* LoginResponse::release_result() {
  // @@protoc_insertion_point(field_release:fixbug.LoginResponse.result)
  
  ::fixbug::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::fixbug::ResultCode* LoginResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbug::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::fixbug::ResultCode* LoginResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:fixbug.LoginResponse.result)
  return _internal_mutable_result();
}
inline void LoginResponse::set_allocated_result(::fixbug::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:fixbug.LoginResponse.result)
}

// .fixbug.GetFriendListResponse getfriendlistresponse = 2;
inline bool LoginResponse::_internal_has_getfriendlistresponse() const {
  return this != internal_default_instance() && getfriendlistresponse_ != nullptr;
}
inline bool LoginResponse::has_getfriendlistresponse() const {
  return _internal_has_getfriendlistresponse();
}
inline void LoginResponse::clear_getfriendlistresponse() {
  if (GetArenaNoVirtual() == nullptr && getfriendlistresponse_ != nullptr) {
    delete getfriendlistresponse_;
  }
  getfriendlistresponse_ = nullptr;
}
inline const ::fixbug::GetFriendListResponse& LoginResponse::_internal_getfriendlistresponse() const {
  const ::fixbug::GetFriendListResponse* p = getfriendlistresponse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fixbug::GetFriendListResponse*>(
      &::fixbug::_GetFriendListResponse_default_instance_);
}
inline const ::fixbug::GetFriendListResponse& LoginResponse::getfriendlistresponse() const {
  // @@protoc_insertion_point(field_get:fixbug.LoginResponse.getfriendlistresponse)
  return _internal_getfriendlistresponse();
}
inline ::fixbug::GetFriendListResponse* LoginResponse::release_getfriendlistresponse() {
  // @@protoc_insertion_point(field_release:fixbug.LoginResponse.getfriendlistresponse)
  
  ::fixbug::GetFriendListResponse* temp = getfriendlistresponse_;
  getfriendlistresponse_ = nullptr;
  return temp;
}
inline ::fixbug::GetFriendListResponse* LoginResponse::_internal_mutable_getfriendlistresponse() {
  
  if (getfriendlistresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbug::GetFriendListResponse>(GetArenaNoVirtual());
    getfriendlistresponse_ = p;
  }
  return getfriendlistresponse_;
}
inline ::fixbug::GetFriendListResponse* LoginResponse::mutable_getfriendlistresponse() {
  // @@protoc_insertion_point(field_mutable:fixbug.LoginResponse.getfriendlistresponse)
  return _internal_mutable_getfriendlistresponse();
}
inline void LoginResponse::set_allocated_getfriendlistresponse(::fixbug::GetFriendListResponse* getfriendlistresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete getfriendlistresponse_;
  }
  if (getfriendlistresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getfriendlistresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getfriendlistresponse, submessage_arena);
    }
    
  } else {
    
  }
  getfriendlistresponse_ = getfriendlistresponse;
  // @@protoc_insertion_point(field_set_allocated:fixbug.LoginResponse.getfriendlistresponse)
}

// .fixbug.GetGroupListResponse getgrouplistresponse = 3;
inline bool LoginResponse::_internal_has_getgrouplistresponse() const {
  return this != internal_default_instance() && getgrouplistresponse_ != nullptr;
}
inline bool LoginResponse::has_getgrouplistresponse() const {
  return _internal_has_getgrouplistresponse();
}
inline void LoginResponse::clear_getgrouplistresponse() {
  if (GetArenaNoVirtual() == nullptr && getgrouplistresponse_ != nullptr) {
    delete getgrouplistresponse_;
  }
  getgrouplistresponse_ = nullptr;
}
inline const ::fixbug::GetGroupListResponse& LoginResponse::_internal_getgrouplistresponse() const {
  const ::fixbug::GetGroupListResponse* p = getgrouplistresponse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fixbug::GetGroupListResponse*>(
      &::fixbug::_GetGroupListResponse_default_instance_);
}
inline const ::fixbug::GetGroupListResponse& LoginResponse::getgrouplistresponse() const {
  // @@protoc_insertion_point(field_get:fixbug.LoginResponse.getgrouplistresponse)
  return _internal_getgrouplistresponse();
}
inline ::fixbug::GetGroupListResponse* LoginResponse::release_getgrouplistresponse() {
  // @@protoc_insertion_point(field_release:fixbug.LoginResponse.getgrouplistresponse)
  
  ::fixbug::GetGroupListResponse* temp = getgrouplistresponse_;
  getgrouplistresponse_ = nullptr;
  return temp;
}
inline ::fixbug::GetGroupListResponse* LoginResponse::_internal_mutable_getgrouplistresponse() {
  
  if (getgrouplistresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbug::GetGroupListResponse>(GetArenaNoVirtual());
    getgrouplistresponse_ = p;
  }
  return getgrouplistresponse_;
}
inline ::fixbug::GetGroupListResponse* LoginResponse::mutable_getgrouplistresponse() {
  // @@protoc_insertion_point(field_mutable:fixbug.LoginResponse.getgrouplistresponse)
  return _internal_mutable_getgrouplistresponse();
}
inline void LoginResponse::set_allocated_getgrouplistresponse(::fixbug::GetGroupListResponse* getgrouplistresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete getgrouplistresponse_;
  }
  if (getgrouplistresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getgrouplistresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getgrouplistresponse, submessage_arena);
    }
    
  } else {
    
  }
  getgrouplistresponse_ = getgrouplistresponse;
  // @@protoc_insertion_point(field_set_allocated:fixbug.LoginResponse.getgrouplistresponse)
}

// .fixbug.GetOfflineMsgResponse getofflinemsgresponse = 4;
inline bool LoginResponse::_internal_has_getofflinemsgresponse() const {
  return this != internal_default_instance() && getofflinemsgresponse_ != nullptr;
}
inline bool LoginResponse::has_getofflinemsgresponse() const {
  return _internal_has_getofflinemsgresponse();
}
inline void LoginResponse::clear_getofflinemsgresponse() {
  if (GetArenaNoVirtual() == nullptr && getofflinemsgresponse_ != nullptr) {
    delete getofflinemsgresponse_;
  }
  getofflinemsgresponse_ = nullptr;
}
inline const ::fixbug::GetOfflineMsgResponse& LoginResponse::_internal_getofflinemsgresponse() const {
  const ::fixbug::GetOfflineMsgResponse* p = getofflinemsgresponse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fixbug::GetOfflineMsgResponse*>(
      &::fixbug::_GetOfflineMsgResponse_default_instance_);
}
inline const ::fixbug::GetOfflineMsgResponse& LoginResponse::getofflinemsgresponse() const {
  // @@protoc_insertion_point(field_get:fixbug.LoginResponse.getofflinemsgresponse)
  return _internal_getofflinemsgresponse();
}
inline ::fixbug::GetOfflineMsgResponse* LoginResponse::release_getofflinemsgresponse() {
  // @@protoc_insertion_point(field_release:fixbug.LoginResponse.getofflinemsgresponse)
  
  ::fixbug::GetOfflineMsgResponse* temp = getofflinemsgresponse_;
  getofflinemsgresponse_ = nullptr;
  return temp;
}
inline ::fixbug::GetOfflineMsgResponse* LoginResponse::_internal_mutable_getofflinemsgresponse() {
  
  if (getofflinemsgresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbug::GetOfflineMsgResponse>(GetArenaNoVirtual());
    getofflinemsgresponse_ = p;
  }
  return getofflinemsgresponse_;
}
inline ::fixbug::GetOfflineMsgResponse* LoginResponse::mutable_getofflinemsgresponse() {
  // @@protoc_insertion_point(field_mutable:fixbug.LoginResponse.getofflinemsgresponse)
  return _internal_mutable_getofflinemsgresponse();
}
inline void LoginResponse::set_allocated_getofflinemsgresponse(::fixbug::GetOfflineMsgResponse* getofflinemsgresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete getofflinemsgresponse_;
  }
  if (getofflinemsgresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getofflinemsgresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getofflinemsgresponse, submessage_arena);
    }
    
  } else {
    
  }
  getofflinemsgresponse_ = getofflinemsgresponse;
  // @@protoc_insertion_point(field_set_allocated:fixbug.LoginResponse.getofflinemsgresponse)
}

// -------------------------------------------------------------------

// LoginoutRequest

// int32 userid = 1;
inline void LoginoutRequest::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginoutRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginoutRequest::userid() const {
  // @@protoc_insertion_point(field_get:fixbug.LoginoutRequest.userid)
  return _internal_userid();
}
inline void LoginoutRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void LoginoutRequest::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:fixbug.LoginoutRequest.userid)
}

// -------------------------------------------------------------------

// LoginoutResponse

// .fixbug.ResultCode result = 1;
inline bool LoginoutResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool LoginoutResponse::has_result() const {
  return _internal_has_result();
}
inline void LoginoutResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::fixbug::ResultCode& LoginoutResponse::_internal_result() const {
  const ::fixbug::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fixbug::ResultCode*>(
      &::fixbug::_ResultCode_default_instance_);
}
inline const ::fixbug::ResultCode& LoginoutResponse::result() const {
  // @@protoc_insertion_point(field_get:fixbug.LoginoutResponse.result)
  return _internal_result();
}
inline ::fixbug::ResultCode* LoginoutResponse::release_result() {
  // @@protoc_insertion_point(field_release:fixbug.LoginoutResponse.result)
  
  ::fixbug::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::fixbug::ResultCode* LoginoutResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbug::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::fixbug::ResultCode* LoginoutResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:fixbug.LoginoutResponse.result)
  return _internal_mutable_result();
}
inline void LoginoutResponse::set_allocated_result(::fixbug::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:fixbug.LoginoutResponse.result)
}

// -------------------------------------------------------------------

// GetFriendListRequest

// int32 userid = 1;
inline void GetFriendListRequest::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFriendListRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFriendListRequest::userid() const {
  // @@protoc_insertion_point(field_get:fixbug.GetFriendListRequest.userid)
  return _internal_userid();
}
inline void GetFriendListRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void GetFriendListRequest::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:fixbug.GetFriendListRequest.userid)
}

// -------------------------------------------------------------------

// GetFriendListResponse

// .fixbug.ResultCode result = 1;
inline bool GetFriendListResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool GetFriendListResponse::has_result() const {
  return _internal_has_result();
}
inline void GetFriendListResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::fixbug::ResultCode& GetFriendListResponse::_internal_result() const {
  const ::fixbug::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fixbug::ResultCode*>(
      &::fixbug::_ResultCode_default_instance_);
}
inline const ::fixbug::ResultCode& GetFriendListResponse::result() const {
  // @@protoc_insertion_point(field_get:fixbug.GetFriendListResponse.result)
  return _internal_result();
}
inline ::fixbug::ResultCode* GetFriendListResponse::release_result() {
  // @@protoc_insertion_point(field_release:fixbug.GetFriendListResponse.result)
  
  ::fixbug::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::fixbug::ResultCode* GetFriendListResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbug::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::fixbug::ResultCode* GetFriendListResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:fixbug.GetFriendListResponse.result)
  return _internal_mutable_result();
}
inline void GetFriendListResponse::set_allocated_result(::fixbug::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:fixbug.GetFriendListResponse.result)
}

// repeated bytes friends = 2;
inline int GetFriendListResponse::_internal_friends_size() const {
  return friends_.size();
}
inline int GetFriendListResponse::friends_size() const {
  return _internal_friends_size();
}
inline void GetFriendListResponse::clear_friends() {
  friends_.Clear();
}
inline std::string* GetFriendListResponse::add_friends() {
  // @@protoc_insertion_point(field_add_mutable:fixbug.GetFriendListResponse.friends)
  return _internal_add_friends();
}
inline const std::string& GetFriendListResponse::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline const std::string& GetFriendListResponse::friends(int index) const {
  // @@protoc_insertion_point(field_get:fixbug.GetFriendListResponse.friends)
  return _internal_friends(index);
}
inline std::string* GetFriendListResponse::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:fixbug.GetFriendListResponse.friends)
  return friends_.Mutable(index);
}
inline void GetFriendListResponse::set_friends(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:fixbug.GetFriendListResponse.friends)
  friends_.Mutable(index)->assign(value);
}
inline void GetFriendListResponse::set_friends(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:fixbug.GetFriendListResponse.friends)
  friends_.Mutable(index)->assign(std::move(value));
}
inline void GetFriendListResponse::set_friends(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  friends_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fixbug.GetFriendListResponse.friends)
}
inline void GetFriendListResponse::set_friends(int index, const void* value, size_t size) {
  friends_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fixbug.GetFriendListResponse.friends)
}
inline std::string* GetFriendListResponse::_internal_add_friends() {
  return friends_.Add();
}
inline void GetFriendListResponse::add_friends(const std::string& value) {
  friends_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fixbug.GetFriendListResponse.friends)
}
inline void GetFriendListResponse::add_friends(std::string&& value) {
  friends_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fixbug.GetFriendListResponse.friends)
}
inline void GetFriendListResponse::add_friends(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  friends_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fixbug.GetFriendListResponse.friends)
}
inline void GetFriendListResponse::add_friends(const void* value, size_t size) {
  friends_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fixbug.GetFriendListResponse.friends)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetFriendListResponse::friends() const {
  // @@protoc_insertion_point(field_list:fixbug.GetFriendListResponse.friends)
  return friends_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetFriendListResponse::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:fixbug.GetFriendListResponse.friends)
  return &friends_;
}

// -------------------------------------------------------------------

// GetGroupListRequest

// int32 userid = 1;
inline void GetGroupListRequest::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupListRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupListRequest::userid() const {
  // @@protoc_insertion_point(field_get:fixbug.GetGroupListRequest.userid)
  return _internal_userid();
}
inline void GetGroupListRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void GetGroupListRequest::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:fixbug.GetGroupListRequest.userid)
}

// -------------------------------------------------------------------

// GetGroupListResponse

// .fixbug.ResultCode result = 1;
inline bool GetGroupListResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool GetGroupListResponse::has_result() const {
  return _internal_has_result();
}
inline void GetGroupListResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::fixbug::ResultCode& GetGroupListResponse::_internal_result() const {
  const ::fixbug::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fixbug::ResultCode*>(
      &::fixbug::_ResultCode_default_instance_);
}
inline const ::fixbug::ResultCode& GetGroupListResponse::result() const {
  // @@protoc_insertion_point(field_get:fixbug.GetGroupListResponse.result)
  return _internal_result();
}
inline ::fixbug::ResultCode* GetGroupListResponse::release_result() {
  // @@protoc_insertion_point(field_release:fixbug.GetGroupListResponse.result)
  
  ::fixbug::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::fixbug::ResultCode* GetGroupListResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbug::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::fixbug::ResultCode* GetGroupListResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:fixbug.GetGroupListResponse.result)
  return _internal_mutable_result();
}
inline void GetGroupListResponse::set_allocated_result(::fixbug::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:fixbug.GetGroupListResponse.result)
}

// repeated bytes groups = 2;
inline int GetGroupListResponse::_internal_groups_size() const {
  return groups_.size();
}
inline int GetGroupListResponse::groups_size() const {
  return _internal_groups_size();
}
inline void GetGroupListResponse::clear_groups() {
  groups_.Clear();
}
inline std::string* GetGroupListResponse::add_groups() {
  // @@protoc_insertion_point(field_add_mutable:fixbug.GetGroupListResponse.groups)
  return _internal_add_groups();
}
inline const std::string& GetGroupListResponse::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const std::string& GetGroupListResponse::groups(int index) const {
  // @@protoc_insertion_point(field_get:fixbug.GetGroupListResponse.groups)
  return _internal_groups(index);
}
inline std::string* GetGroupListResponse::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:fixbug.GetGroupListResponse.groups)
  return groups_.Mutable(index);
}
inline void GetGroupListResponse::set_groups(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:fixbug.GetGroupListResponse.groups)
  groups_.Mutable(index)->assign(value);
}
inline void GetGroupListResponse::set_groups(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:fixbug.GetGroupListResponse.groups)
  groups_.Mutable(index)->assign(std::move(value));
}
inline void GetGroupListResponse::set_groups(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  groups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fixbug.GetGroupListResponse.groups)
}
inline void GetGroupListResponse::set_groups(int index, const void* value, size_t size) {
  groups_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fixbug.GetGroupListResponse.groups)
}
inline std::string* GetGroupListResponse::_internal_add_groups() {
  return groups_.Add();
}
inline void GetGroupListResponse::add_groups(const std::string& value) {
  groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fixbug.GetGroupListResponse.groups)
}
inline void GetGroupListResponse::add_groups(std::string&& value) {
  groups_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fixbug.GetGroupListResponse.groups)
}
inline void GetGroupListResponse::add_groups(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fixbug.GetGroupListResponse.groups)
}
inline void GetGroupListResponse::add_groups(const void* value, size_t size) {
  groups_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fixbug.GetGroupListResponse.groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetGroupListResponse::groups() const {
  // @@protoc_insertion_point(field_list:fixbug.GetGroupListResponse.groups)
  return groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetGroupListResponse::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:fixbug.GetGroupListResponse.groups)
  return &groups_;
}

// -------------------------------------------------------------------

// FriendChatRequest

// int32 friendid = 1;
inline void FriendChatRequest::clear_friendid() {
  friendid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendChatRequest::_internal_friendid() const {
  return friendid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendChatRequest::friendid() const {
  // @@protoc_insertion_point(field_get:fixbug.FriendChatRequest.friendid)
  return _internal_friendid();
}
inline void FriendChatRequest::_internal_set_friendid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  friendid_ = value;
}
inline void FriendChatRequest::set_friendid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_friendid(value);
  // @@protoc_insertion_point(field_set:fixbug.FriendChatRequest.friendid)
}

// bytes message = 2;
inline void FriendChatRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FriendChatRequest::message() const {
  // @@protoc_insertion_point(field_get:fixbug.FriendChatRequest.message)
  return _internal_message();
}
inline void FriendChatRequest::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:fixbug.FriendChatRequest.message)
}
inline std::string* FriendChatRequest::mutable_message() {
  // @@protoc_insertion_point(field_mutable:fixbug.FriendChatRequest.message)
  return _internal_mutable_message();
}
inline const std::string& FriendChatRequest::_internal_message() const {
  return message_.GetNoArena();
}
inline void FriendChatRequest::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FriendChatRequest::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.FriendChatRequest.message)
}
inline void FriendChatRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.FriendChatRequest.message)
}
inline void FriendChatRequest::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.FriendChatRequest.message)
}
inline std::string* FriendChatRequest::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FriendChatRequest::release_message() {
  // @@protoc_insertion_point(field_release:fixbug.FriendChatRequest.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FriendChatRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:fixbug.FriendChatRequest.message)
}

// -------------------------------------------------------------------

// FriendChatResponse

// .fixbug.ResultCode result = 1;
inline bool FriendChatResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool FriendChatResponse::has_result() const {
  return _internal_has_result();
}
inline void FriendChatResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::fixbug::ResultCode& FriendChatResponse::_internal_result() const {
  const ::fixbug::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fixbug::ResultCode*>(
      &::fixbug::_ResultCode_default_instance_);
}
inline const ::fixbug::ResultCode& FriendChatResponse::result() const {
  // @@protoc_insertion_point(field_get:fixbug.FriendChatResponse.result)
  return _internal_result();
}
inline ::fixbug::ResultCode* FriendChatResponse::release_result() {
  // @@protoc_insertion_point(field_release:fixbug.FriendChatResponse.result)
  
  ::fixbug::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::fixbug::ResultCode* FriendChatResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbug::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::fixbug::ResultCode* FriendChatResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:fixbug.FriendChatResponse.result)
  return _internal_mutable_result();
}
inline void FriendChatResponse::set_allocated_result(::fixbug::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:fixbug.FriendChatResponse.result)
}

// -------------------------------------------------------------------

// GetOfflineMsgRequest

// int32 userid = 1;
inline void GetOfflineMsgRequest::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetOfflineMsgRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetOfflineMsgRequest::userid() const {
  // @@protoc_insertion_point(field_get:fixbug.GetOfflineMsgRequest.userid)
  return _internal_userid();
}
inline void GetOfflineMsgRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void GetOfflineMsgRequest::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:fixbug.GetOfflineMsgRequest.userid)
}

// -------------------------------------------------------------------

// GetOfflineMsgResponse

// .fixbug.ResultCode result = 1;
inline bool GetOfflineMsgResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool GetOfflineMsgResponse::has_result() const {
  return _internal_has_result();
}
inline void GetOfflineMsgResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::fixbug::ResultCode& GetOfflineMsgResponse::_internal_result() const {
  const ::fixbug::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fixbug::ResultCode*>(
      &::fixbug::_ResultCode_default_instance_);
}
inline const ::fixbug::ResultCode& GetOfflineMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:fixbug.GetOfflineMsgResponse.result)
  return _internal_result();
}
inline ::fixbug::ResultCode* GetOfflineMsgResponse::release_result() {
  // @@protoc_insertion_point(field_release:fixbug.GetOfflineMsgResponse.result)
  
  ::fixbug::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::fixbug::ResultCode* GetOfflineMsgResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbug::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::fixbug::ResultCode* GetOfflineMsgResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:fixbug.GetOfflineMsgResponse.result)
  return _internal_mutable_result();
}
inline void GetOfflineMsgResponse::set_allocated_result(::fixbug::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:fixbug.GetOfflineMsgResponse.result)
}

// repeated bytes offlinemsg = 2;
inline int GetOfflineMsgResponse::_internal_offlinemsg_size() const {
  return offlinemsg_.size();
}
inline int GetOfflineMsgResponse::offlinemsg_size() const {
  return _internal_offlinemsg_size();
}
inline void GetOfflineMsgResponse::clear_offlinemsg() {
  offlinemsg_.Clear();
}
inline std::string* GetOfflineMsgResponse::add_offlinemsg() {
  // @@protoc_insertion_point(field_add_mutable:fixbug.GetOfflineMsgResponse.offlinemsg)
  return _internal_add_offlinemsg();
}
inline const std::string& GetOfflineMsgResponse::_internal_offlinemsg(int index) const {
  return offlinemsg_.Get(index);
}
inline const std::string& GetOfflineMsgResponse::offlinemsg(int index) const {
  // @@protoc_insertion_point(field_get:fixbug.GetOfflineMsgResponse.offlinemsg)
  return _internal_offlinemsg(index);
}
inline std::string* GetOfflineMsgResponse::mutable_offlinemsg(int index) {
  // @@protoc_insertion_point(field_mutable:fixbug.GetOfflineMsgResponse.offlinemsg)
  return offlinemsg_.Mutable(index);
}
inline void GetOfflineMsgResponse::set_offlinemsg(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:fixbug.GetOfflineMsgResponse.offlinemsg)
  offlinemsg_.Mutable(index)->assign(value);
}
inline void GetOfflineMsgResponse::set_offlinemsg(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:fixbug.GetOfflineMsgResponse.offlinemsg)
  offlinemsg_.Mutable(index)->assign(std::move(value));
}
inline void GetOfflineMsgResponse::set_offlinemsg(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  offlinemsg_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fixbug.GetOfflineMsgResponse.offlinemsg)
}
inline void GetOfflineMsgResponse::set_offlinemsg(int index, const void* value, size_t size) {
  offlinemsg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fixbug.GetOfflineMsgResponse.offlinemsg)
}
inline std::string* GetOfflineMsgResponse::_internal_add_offlinemsg() {
  return offlinemsg_.Add();
}
inline void GetOfflineMsgResponse::add_offlinemsg(const std::string& value) {
  offlinemsg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fixbug.GetOfflineMsgResponse.offlinemsg)
}
inline void GetOfflineMsgResponse::add_offlinemsg(std::string&& value) {
  offlinemsg_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fixbug.GetOfflineMsgResponse.offlinemsg)
}
inline void GetOfflineMsgResponse::add_offlinemsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  offlinemsg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fixbug.GetOfflineMsgResponse.offlinemsg)
}
inline void GetOfflineMsgResponse::add_offlinemsg(const void* value, size_t size) {
  offlinemsg_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fixbug.GetOfflineMsgResponse.offlinemsg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetOfflineMsgResponse::offlinemsg() const {
  // @@protoc_insertion_point(field_list:fixbug.GetOfflineMsgResponse.offlinemsg)
  return offlinemsg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetOfflineMsgResponse::mutable_offlinemsg() {
  // @@protoc_insertion_point(field_mutable_list:fixbug.GetOfflineMsgResponse.offlinemsg)
  return &offlinemsg_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fixbug

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
